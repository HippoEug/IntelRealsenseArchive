#include <iostream> // Basic Input & Output Library
#include <fstream> // Input & Output Library for files
#include <sstream> // String class to operate Strings
#include <string> // For String datatypes
#include <map> // For mapping different objects(?)
#include <algorithm> // Functions for manipulating elements
#include <mutex> // To sync and protect shared data from being accessed by multiple threads
#include <cmath> // Functions to compute common mathematical operations and transformations
#include <thread> // Manage & Execute threads in an aplication
#include <chrono> // For time synchronization
#include <conio.h> // For MS-DOS functions
#include <stdio.h>

#include <librealsense2/rs.hpp> // Include Realsense Cross Platform API
#include "example.hpp" // Include some rendering functions for convenience 

#define STB_IMAGE_WRITE_IMPLEMENTATION // 3rd Party Headers for Writing PNG Files
#include "stb_image_write.h" // 3rd Party Headers for Writing PNG Files

#include <opencv2/opencv.hpp>

texture depth_image, color_image; // Declares two textures on the GPU, for Color and Depth
rs2::colorizer color_map; // Declares Depth Colorizer for visualization of depth data

rs2::pipeline pipe; // Declares Realsense Pipeline, providing an interface to the D435 and its sensors

unsigned int choice;

void preview2D();
void preview3D();
void savePreview();
void getMetaData();
void captureRData();
void getDistance();
void selectCoordinates();

void getChoice();
void terminateChoice();

void register_glfw_callbacks(window& app, glfw_state& app_state); // Helper function
																  //void draw_pointcloud(window& app, state& app_state, rs2::points& points); //Helper function
static void onMouse(int event, int x, int y, int, void* imgptr);

int main() try {
	pipe.start(); // Realsense Pipeline start

	std::cout << "=============[STREAM]=============" << std::endl;
	std::cout << "1. Preview Depth & RGB Cameras" << std::endl;
	std::cout << "2. Preview 3D PointCloud" << std::endl;
	std::cout << "==============[SAVE]==============" << std::endl;
	std::cout << "3. Save Color & Depth Preview PNG" << std::endl;
	std::cout << "4. Save Preview MetaData" << std::endl;
	std::cout << "5. Capture Relevant Data" << std::endl;
	std::cout << "=========[MSC' FUNCTIONS]=========" << std::endl;
	std::cout << "6. Get Distance" << std::endl;
	std::cout << "7. Select Coordinates of Object" << std::endl;
	std::cout << "\nChoice: ";
	std::cin >> choice;

	while (1) {
		switch (choice) {
		case 1: { // Preview Depth & RGB Cameras
			std::thread t1(preview2D);
			std::thread t2(terminateChoice);
			t1.join();
			t2.join();

			getChoice();
			break;
		}
		case 2: { // Preview 3D PointCloud
			std::thread t1(preview3D);
			std::thread t2(terminateChoice);
			t1.join();
			t2.join();

			getChoice();
			break;
		}
		case 3: { // Save Color & Depth Preview PNG
			std::cout << "Taking a screenshot.. please wait" << std::endl;
			savePreview();
			getChoice();
			break;
		}
		case 4: { // Save Preview MetaData
			getMetaData();
			break;
		}
		case 5: { // Capture Relevant Data
			captureRData();
			break;
		}
		case 6: { // Get Distance
			getDistance();
			break;
		}
		case 7: {
			selectCoordinates();
			break;
		}
		default: {
			std::cout << "\nINVALID OPTION" << std::endl;
			std::chrono::milliseconds(1000);
			getChoice();
		}
		}
	}

	return EXIT_SUCCESS;
}
catch (const rs2::error & e) {
	std::cerr << "RealSense error calling " << e.get_failed_function() << "(" << e.get_failed_args() << "):\n    " << e.what() << std::endl;

	return EXIT_FAILURE;
}
catch (const std::exception& e) {
	std::cerr << e.what() << std::endl;

	return EXIT_FAILURE;
}

void preview2D() {
	window app(1280, 600, "Intel Realsense D435");

	while (app && (choice == 1)) { // Check if application is still alive
		rs2::frameset data = pipe.wait_for_frames(); // Wait for next set of frames from the camera

		rs2::frame depth = color_map(data.get_depth_frame()); // Find and colorize the depth data
		rs2::frame color = data.get_color_frame(); // Find the color data

		depth_image.render(depth, { 0, 0, app.width() / 2, app.height() }); // Render depth on to the first half of the screen
		color_image.render(color, { app.width() / 2, 0, app.width() / 2, app.height() }); // Render color on to the second half of the screen
	}
}

void preview3D() {
	window app(1280, 600, "Intel Realsense D435");

	glfw_state app_state; // Construct an object to manage view state

						  //state app_state = { 0, 0, 0, 0, false, 0, 0, 0}; // No idea what this does

	register_glfw_callbacks(app, app_state); // Register callbacks to allow manipulation of the pointcloud

	rs2::pointcloud pc; // Declares pointcloud object for calculating pointclouds and texture mappings
	rs2::points points; // Makes points object to be persistent so last cloud is still displayed should a frame drop

	while (app && (choice == 2)) { // Check if application is still alive
		auto frames = pipe.wait_for_frames(); // Wait for next set of frames from the camera
		auto depth = frames.get_depth_frame(); // Wait for next set of frames from the camera

		points = pc.calculate(depth); // Generate the pointcloud and texture mappings
		auto color = frames.get_color_frame(); // Generate the pointcloud and texture mappings

		pc.map_to(color); // Tell pointcloud object to map to this color frame

		app_state.tex.upload(color); // Upload the color frame to OpenGL

		draw_pointcloud(app.width(), app.height(), app_state, points); // Draw the pointcloud
	}
}

void savePreview() {
	for (auto i = 0; i < 30; ++i) {
		pipe.wait_for_frames();
	}

	// Wait for the next set of frames from the camera. Now that autoexposure, etc.
	// has settled, we will write these to disk
	for (auto&& frame : pipe.wait_for_frames())
	{
		// We can only save video frames as pngs, so we skip the rest
		if (auto vf = frame.as<rs2::video_frame>())
		{
			auto stream = frame.get_profile().stream_type();
			// Use the colorizer to get an rgb image for the depth stream
			if (vf.is<rs2::depth_frame>()) vf = color_map(frame);

			// Write images to disk
			std::stringstream png_file;
			png_file << "x-rs-save-to-disk-output-" << vf.get_profile().stream_name() << ".png";
			stbi_write_png(png_file.str().c_str(), vf.get_width(), vf.get_height(),
				vf.get_bytes_per_pixel(), vf.get_data(), vf.get_stride_in_bytes());
			std::cout << "Saved " << png_file.str() << std::endl;

			// Record per-frame metadata for UVC streams
			std::stringstream csv_file;
			csv_file << "x-rs-save-to-disk-output-" << vf.get_profile().stream_name() << "-metadata.csv";

			std::ofstream csv;
			csv.open(csv_file.str());

			//    std::cout << "Writing metadata to " << filename << endl;
			csv << "Stream," << rs2_stream_to_string(vf.get_profile().stream_type()) << "\nMetadata Attribute,Value\n";

			// Record all the available metadata attributes
			for (size_t i = 0; i < RS2_FRAME_METADATA_COUNT; i++)
			{
				if (vf.supports_frame_metadata((rs2_frame_metadata_value)i))
				{
					csv << rs2_frame_metadata_to_string((rs2_frame_metadata_value)i) << "," << vf.get_frame_metadata((rs2_frame_metadata_value)i) << "\n";
				}
			}
			csv.close();
		}
	}
}

void getMetaData() {
	// TODO
}

void captureRData() {
	savePreview(); // Capture Data

	int x = 0;
	int y = 0;
	double z = 0;

	double lineCount = 0;

	std::ofstream outFile;
	outFile.open("xyz-depth-data.csv");

	outFile << "x" << "," << "y" << "," << "z" << std::endl;
	lineCount++;

	for (int i = 0; i < 921600; i++) {
		// outFile << i << "," << i*i << std::endl;

		rs2::frameset frames = pipe.wait_for_frames();
		rs2::depth_frame depth = frames.get_depth_frame();
		z = depth.get_distance(x, y);

		outFile << x << "," << y << "," << "z" << std::endl;
		std::cout << "Written: i = " << i << " x " << x << " y " << y << std::endl;
	}

	std::cout << "Done" << std::endl;
}

void getDistance() {
	rs2::frameset frames = pipe.wait_for_frames();

	rs2::depth_frame depth = frames.get_depth_frame();
	std::cout << depth.get_distance(640, 360) << std::endl; // For center of camera 

															/*

															// Try to get a frame of a depth image
															rs2::depth_frame depth = frames.get_depth_frame();

															// Get the depth frame's dimensions
															float width = depth.get_width();
															float height = depth.get_height();

															// Query the distance from the camera to the object in the center of the image
															float dist_to_center = depth.get_distance(width / 2, height / 2);

															std::cout << "The camera is facing an object " << dist_to_center << " meters away \r";

															*/
}

void selectCoordinates() {
	cv::Mat rgbImage;
	rgbImage = cv::imread("image.png"); // Open Image
	if (rgbImage.empty()) {
		std::cout << "Error: Image Not Found!" << std::endl << std::endl;
		cv::waitKey(3);
	}

	cv::namedWindow("Points Selection", CV_WINDOW_AUTOSIZE); // Fixed-size window, matching resolution of image
	//cv::namedWindow("Points Selection", CV_WINDOW_NORMAL); // Allows resizing of window
	setMouseCallback("Points Selection", onMouse, &rgbImage); // Pass ptr to mat here
	cv::imshow("Points Selection", rgbImage);

	cv::waitKey(0); // Hold window open until user presses a key
}

void getChoice() {
	system("CLS");

	std::cout << "=============[STREAM]=============" << std::endl;
	std::cout << "1. Preview Depth & RGB Cameras" << std::endl;
	std::cout << "2. Preview 3D PointCloud" << std::endl;
	std::cout << "==============[SAVE]==============" << std::endl;
	std::cout << "3. Save Color & Depth Preview PNG" << std::endl;
	std::cout << "4. Save Preview MetaData" << std::endl;
	std::cout << "5. Capture Relevant Data" << std::endl;
	std::cout << "=========[MSC' FUNCTIONS]=========" << std::endl;
	std::cout << "6. Get Distance" << std::endl;
	std::cout << "7. Select Coordinates of Object" << std::endl;
	std::cout << "\nChoice: ";
	std::cin >> choice;
}

void terminateChoice() {
	system("CLS");

	std::cout << "00. Terminate Preview" << std::endl;
	std::cout << "01. TODO: Capture Data" << std::endl;

	std::cout << "\nChoice: ";
	std::cin >> choice;
}


static void onMouse(int event, int x, int y, int, void* imgptr) {
	using namespace cv;

	if (event != 1) { // draw only on left mouse click
		return;
	}

	Mat& img = (*(Mat*)imgptr); // cast first and dereference
	Point pt1 = Point(x, y);

	circle(img, pt1, 1, Scalar(0, 255, 0), 30, 8, 0); //RGB 0 255 0 = GREEN

	std::cout << "X: " << x << " Y: " << y << std::endl;

	imshow("Points Selection", img);
	waitKey(1);
}
